datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName  String
  lastName   String
  profilePic String?
  bio        String  @default("")

  enrolledCourses     Course[]   @relation("Enrolled")
  completedCourses    Course[]   @relation("Completed")
  coursesTaught       Course[]   @relation("Taught")
  activitiesCompleted Activity[]

  hoursCompleted HoursLog[]

  badgesCreated Badge[] @relation("Created")
  badgesEarned  Badge[] @relation("Earned")

  program     Program         @relation(fields: [programId], references: [id])
  programId   Int
  standing    StudentStanding @default(FRESHMAN)
  accountType UserType        @default(STUDENT)
  password    Password[]
}

model Password {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  hash String
}

enum StudentStanding {
  FRESHMAN
  SOPHOMORE
  JUNIOR
  SENIOR
}

enum UserType {
  STUDENT
  PROFESSOR
  ADMIN
}

model Program {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name        String
  description String

  users   User[]
  courses Course[]
}

model Badge {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  pictureUrl  String
  description String

  users User[] @relation("Earned")

  createdBy   User   @relation(name: "Created", fields: [createdById], references: [id])
  createdById String
}

model Course {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name             String
  description      String
  courseCode       String
  needsHoursLogged Boolean

  professor   User   @relation(name: "Taught", fields: [professorId], references: [id])
  professorId String

  enrolledUsers  User[]       @relation("Enrolled")
  completedUsers User[]       @relation("Completed")
  programs       Program[]
  competencies   Competency[]
  hoursLogged    HoursLog[]
}

model Competency {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String

  courses    Course[]
  activities Activity[]
}

model Activity {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  description  String
  competencies Competency[]

  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}

model HoursLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  start   DateTime
  end     DateTime
  comment String

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
}
